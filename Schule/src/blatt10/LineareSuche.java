package blatt10;

public class LineareSuche {
    static int bedingungen = 0;
    static int operationen = 0;

    public static boolean suchen(int[] arr, int n) {

        operationen++;

        for (int i = 0; i < arr.length - 1; i++) {

            bedingungen++;
            operationen++;
            operationen += 2;

            if (arr[i] == n) {
                bedingungen++;
                return true;
            }
        }
        
        return false;
    }

    public static void main(String[] args) {
        int[] arr1 = new int[] {7783, 130, 7343, -132, 1922, -9673, 7456, 7160, -1784, -8996, 40, -1699, 1611, -5768, 6407, 2841, 8448, -5082, -9873, -3547, 3562, 1519, 5081, 1670, -8289, -310, -563, -4744, 4535, -7940, 5032, 5031, 1677, -1239, -6734, -2998, -4736, 2729, -6933, -408, -9356, 1437, 4435, 5991, -6900, 2424, 1783, -2101, 172, -6152, 5404, 4335, 2328, -6750, 6481, 7772, -9134, 7824, 1313, -3559, 1299, 7689, 3816, -3493, 2884, 37, 1855, 682, 505, -3508, 2602, 898, 3874, 8590, -5142, -8204, 758, 7061, 2152, -878, 5931, -617, 9474, 2480, 5600, -2898, -1457, 5454, -1761, -517, 1871, -2242, 7089, -6716, 4188, -6120, 7035, -212, 1301, 571, 9101, 9715, -8857, 1579, -459, -5769, -546, -7826, -2713, 5957, -6528, 8328, -6523, 7807, -9028, -4214, 9827, 9364, 9138, -7189, -1158, -9327, -1965, -2931, 8126, -8483, 6750, -8130, 3558, 595, -3116, -86, -8416, -6494, 7586, -6283, -347, 1013, 9187, 1061, 5581, -165, -1720, 1091, -8407, 6978, 6143, -7924, -3161, 5709, -5448, 5425, -6569, -3770, -1805, 2180, -4742, 7474, 8821, -2014, 6397, 7686, 8262, 476, 6415, -9026, 71, 9040, -6420, -5389, -8616, 1060, 3837, -2418, -2643, -8940, -6683, 4709, 8633, -450, -4806, -7309, -2624, 6944, -2021, 4443, 8237, -5462, 1550, 6410, 1457, 9339, 9741, 9805, -8239, -7504, -6163, 1243, 6377, 2000, -9982, -9163, 8254, -369, -4354, 6503, -3610, -733, 4166, 2143, 4264, 9213, 6524, 4251, 9429, 4636, 8149, -3314, 2586, -2087, 4891, -3502, 2887, -5528, 8741, 5091, 7649, 9613, -5288, 8452, 9340, -2172, -6036, 7779, 438, -9721, 5087, 7580, -2372, 8455, -4641, -7860, -9170, 3102, -3109, 3226, -333, 9961, 8768, -7955};
        int[] arr2 = new int[] {4977, -8847, 4217, 912, 3152, 636, 2676, 5547, 5869, -8130, 2264, -7628, -1552, 7775, -5872, -1129, 6801, -1043, -7304, -5004, -9187, -7495, 887, 6943, 6980, 160, -5295, 636, -8055, 1028, -3105, 5142, -8350, -7565, 9136, 3757, -7680, 4014, 97, 984, -1173, -5241, 2764, 7392, -6312, 479, -1383, -8883, -4389, -9940, -1541, 4702, 374, 2837, -9806, 9103, 8801, -3388, -7707, 2772, 6663, -3991, 8440, 3154, -387, -5673, 3566, 302, 2531, 8480, -5590, 7919, -2764, -3694, 8801, -4195, 4983, -1795, -3003, -484, -8971, 1055, -4317, 7983, 7277, 1226, -9307, 7906, 6079, 5757, -2002, -5093, 3285, -4062, 4203, 5783, -8066, 5970, -2433, 3625, 9260, 8821, -1548, -1910, -778, -7823, 4190, 6889, -9717, 8695, -2530, 1318, 1886, -1461, 9627, 8574, 3643, 5020, 711, 6746, 4446, 4284, -3391, 4486, -3561, 3688, -9712, 6716, -28, -6920, 8926, -9826, -379, -2328, -8352, 8132, 7043, 808, -6411, -7616, 5802, 7713, -8783, 2294, -8040, 7133, -8931, 5810, 3051, -3130, -486, 5218, 5043, -8767, -5333, 1777, 1962, 3791, -6747, 7582, 6130, -2897, 4985, 480, -1748, -7353, -5042, -1560, -3897, -1179, -9442, 3447, -1839, 2567, -6405, -8166, -5780, 1151, -9388, 7857, -1082, 4519, -5261, -9532, 6029, -4100, 1023, 9334, 1532, -1526, -6200, 5553, -8385, -620, 9445, 4893, -1808, 8785, -9184, -3004, 8943, 1417, -9364, -7355, 1500, 659, -9674, 3039, -7910, 1253, -1991, 9923, 7871, 5590, -5152, -6466, 9085, -9246, -7581, -3532, -7706, 8689, 5468, 5939, 9180, -9693, -5811, -5707, -3241, -4246, 8068, 8230, -5741, 7806, 9400, 905, -378, 3006, 8687, -2172, -5801, -3892, 6475, -2507, -1858, -2634, 6561, -9299, -9083, 9341};
        int[] arr3 = new int[] {-2537, -4249, 6986, 2531, 8558, -9023, -9654, -8197, -6733, 8211, 9776, 3562, -4158, 735, -7631, 7775, -4891, 4059, -9294, 7362, -9913, -4127, -5907, -9700, -2839, -1448, -3482, -4487, 1795, 7853, 4947, -7015, 5993, 458, -3708, -9065, 9021, 3615, 4315, 8475, -6540, -728, -1194, -9117, 1152, 7809, 8436, -3615, -5559, -7591, -3886, 8351, 6822, 4032, 915, 4832, -5761, 9199, -5636, 8536, 3214, 7919, 345, 4741, -4642, -2428, -2147, -8013, 9022, -9988, 3562, 1014, -1540, 3805, -2640, 1105, 8334, -8740, 8043, 9754, -2752, 776, -1259, -8385, -2286, -908, 1971, -4356, -7948, 5054, -7162, -4357, -6277, -3107, -4525, 8644, -8131, 8251, -7317, 8072, 3179, 4826, -8436, 4157, -356, -6972, 9039, -7216, 3394, -5138, 269, -4242, 529, 9117, 278, -9567, 4661, 7908, 4519, -5317, -2073, 9798, -2381, -5576, -7734, 5950, -8761, -4815, 7027, -5843, -8268, 6683, -9725, -2937, 6220, 9904, 666, 5580, -8256, 9913, -5621, -3793, -3737, 4398, 7225, 1836, -7358, -2066, 6049, 9699, 7087, 4965, 5349, -2859, -7907, -9228, 5272, -3767, -9425, -1093, 5272, 1605, 2703, 6133, 4131, 2344, -199, -8628, -8528, 8467, -9263, 3905, 8500, -4760, -4574, 7914, 6463, 4454, -2719, 5305, 112, 821, -8083, -3081, 468, 3724, 2916, -6643, -3723, -129, -2852, -8988, -3262, -9263, 1876, 6291, 9496, 209, 3874, -8367, 7286, 2452, -3288, 555, -5728, 7788, -3393, 5869, -1179, 5265, 9499, 5023, -6676, 4559, 2394, 9726, -6404, 7042, -9410, -6903, 546, 6027, -959, -3046, -4995, 9665, -9088, 4297, 2913, -3613, -738, -2428, -7365, -7522, 8861, -7978, 8627, 4110, -5704, -4745, 6570, 1999, 7774, -927, -6230, 1886, 5504, -2315, -4288, 8338};

        //System.out.println(arr1.length);
        System.out.println(suchen(arr1, 1886));
        //System.out.println(operationen + " Operationen, " + bedingungen + " Bedingungen");
        System.out.println(suchen(arr2, 1886));
        System.out.println(suchen(arr3, 1886));

        System.out.println(operationen + " Operationen, " + bedingungen + " Bedingungen");

        /*
            c)
                Best-Case:
                    - arr[0] == n
                    - 4 Operationen
                    - 2 Bedingungen

                Worst-Case:
                    - der Wert von keinem der Elemente des Arrays arr entsprechen dem Wert von n
                    - 3 * arr.length - 2 Operationen
                    - arr.length - 1 Bedingungen

                Average-Case:
                    - arr.length / 2
                    - 3 * arr.length / 2 - 1 Operationen
                    - arr.length / 2 - 0.5 Bedingungen
         */

    }

}

